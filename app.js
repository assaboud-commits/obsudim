let currentView = "menu";
let calendarData = null;

const app = document.getElementById("app");
const backBtn = document.getElementById("backBtn");

// ===== —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω =====
document.addEventListener("DOMContentLoaded", () => {
  // —Å–∫—Ä—ã–≤–∞–µ–º —Å–ø–ª—ç—à —á–µ—Ä–µ–∑ 2c –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
  setTimeout(() => {
    const splash = document.querySelector(".splash");
    if (splash) splash.remove();
    showMainMenu();
  }, 2000);
});

// ===== –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====
function showMainMenu() {
  currentView = "menu";
  backBtn.style.display = "none";
  app.innerHTML = `
    <div class="card" style="text-align:center;">
      <h2>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</h2>
      <div style="display:flex;flex-direction:column;gap:12px;margin-top:12px;">
        <button class="btn" id="calendarButton">üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π</button>
        <button class="btn" id="rulesButton">üìñ –ü—Ä–∞–≤–∏–ª–∞</button>
      </div>
    </div>
  `;
  document.getElementById("calendarButton").addEventListener("click", showCalendar);
  document.getElementById("rulesButton").addEventListener("click", showRules);
}

// ===== –ø—Ä–∞–≤–∏–ª–∞ =====
function showRules() {
  currentView = "rules";
  backBtn.style.display = "inline-flex";
  app.innerHTML = `
    <div class="card view">
      <h2>–ü—Ä–∞–≤–∏–ª–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π</h2>
      <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π –ø–æ —Ñ–∏–≥—É—Ä–Ω–æ–º—É –∫–∞—Ç–∞–Ω–∏—é.</p>
      <p class="muted">–ü–æ–∑–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã ISU –∏ –§–§–ö–†.</p>
    </div>
  `;
}

// ===== —É—Ç–∏–ª–∏—Ç—ã =====
function classByType(t) {
  if (!t) return "";
  return t === "GP" ? "is-gp" :
         t === "GPF" ? "is-gpf" :
         t === "CS" ? "is-cs" :
         t === "RUS" ? "is-rus" : "";
}

function safeJoin(arr, sep=", ") {
  return (arr || []).filter(Boolean).join(sep);
}

// —Å—Ç—Ä–æ–∏–º HTML –≤–∫–ª–∞–¥–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
function buildParticipantsHTML(participants = {}) {
  const groups = [
    { key: "men", label: "–ú—É–∂—á–∏–Ω—ã" },
    { key: "women", label: "–ñ–µ–Ω—â–∏–Ω—ã" },
    { key: "pairs", label: "–ü–∞—Ä—ã" },
    { key: "dance", label: "–¢–∞–Ω—Ü—ã" },
  ];
  const counts = {};
  groups.forEach(g => counts[g.key] = (participants[g.key] || []).length);

  // –≤–∫–ª–∞–¥–∫–∏
  const tabs = groups.map(g => {
    const c = counts[g.key] || 0;
    return `<button class="tab" data-tab="${g.key}">${g.label} (${c})</button>`;
  }).join("");

  // —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (men –∏–ª–∏ –ø–µ—Ä–≤–∞—è —Å –¥–∞–Ω–Ω—ã–º–∏)
  let defaultKey = groups.find(g => counts[g.key] > 0)?.key || "men";
  const list = (participants[defaultKey] || []).map(n => `<li>${n}</li>`).join("") || `<li class="muted">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</li>`;

  return `
    <div class="details">
      <div class="tabs">${tabs}</div>
      <ul class="plist" data-current="${defaultKey}">${list}</ul>
    </div>
  `;
}

// –Ω–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
function attachTabsHandlers(detailsEl, participants = {}) {
  const tabs = detailsEl.querySelectorAll(".tab");
  const list = detailsEl.querySelector(".plist");

  function activate(tabKey) {
    tabs.forEach(t => t.classList.toggle("active", t.dataset.tab === tabKey));
    const arr = participants[tabKey] || [];
    list.dataset.current = tabKey;
    list.innerHTML = arr.length ? arr.map(n => `<li>${n}</li>`).join("") : `<li class="muted">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</li>`;
  }

  // –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π
  const first = Array.from(tabs).find(t => (participants[t.dataset.tab] || []).length > 0) || tabs[0];
  activate(first.dataset.tab);

 
